import pytest
from pathlib import Path

@pytest.fixture(autouse=True)
def screenshot_dir(page,request):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ —Ç–µ—Å—Ç —É–ø–∞–ª"""
    yield
    if request.node.rep_call.failed: # –µ—Å–ª–∏ —Ç–µ—Å—Ç —É–ø–∞–ª
        path = Path(__file__).parent / "screenshots" / f"{request.node.name}.png"


import pytest
from pathlib import Path

# –•—É–∫, –∫–æ—Ç–æ—Ä—ã–π —Ü–µ–ø–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)


@pytest.fixture(autouse=True)
def screenshot_on_fail(page, request):
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç, –µ—Å–ª–∏ —Ç–µ—Å—Ç —É–ø–∞–ª"""
    yield  # –∑–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–∞–º —Ç–µ—Å—Ç

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–µ—Å—Ç —É–ø–∞–ª –∏–º–µ–Ω–Ω–æ –≤ —Ñ–∞–∑–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (call)
    if request.node.rep_call.failed:
        screenshots_dir = Path(__file__).parent / "screenshots"
        screenshots_dir.mkdir(exist_ok=True)

        file_path = screenshots_dir / f"{request.node.name}.png"
        page.screenshot(path=file_path)

        print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
