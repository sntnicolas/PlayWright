# conftest.py
import pytest
import time
from pathlib import Path

"""  –ö—É—Å–æ–∫ –∫–æ–¥–∞ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–∞—Ö–æ—á—É –Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –∞ –≤ –∫–æ–¥–µ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ """
# from playwright.sync_api import sync_playwright
# @pytest.fixture(scope="session")
# def playwright():
#     with sync_playwright() as p:
#         yield p
#
# @pytest.fixture(scope="session")
# def browser(playwright):
#     browser = playwright.chromium.launch(headless=False)
#     yield browser
#     browser.close()
#
# @pytest.fixture(scope="function")
# def page(browser):
#     context = browser.new_context()
#     page = context.new_page()
#     yield page
#     context.close()


@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """–•—É–∫: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ (setup/call/teardown)."""
    outcome = yield
    rep = outcome.get_result()
    setattr(item, f"rep_{rep.when}", rep)

@pytest.fixture(autouse=True)
def screenshot_after_each_test(request, page):
    """–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç.
       –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–ø–∞–ª ‚Üí –∏–º—è —Ñ–∞–π–ª–∞ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ _failed.
    """
    yield

    # –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫—Ä–∏–Ω–æ–≤
    screenshots_dir = Path("tests/screenshots")
    screenshots_dir.mkdir(parents=True, exist_ok=True)

    # """–í–∞—Ä–∏–∞–Ω—Ç –∫–æ–≥–¥–∞ –Ω–∞–º –≤–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ–º–∞–Ω–∞"""
    # if not screenshots_dir.exists():
    #     raise RuntimeError("‚ùå –ü–∞–ø–∫–∞ tests/screenshots –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    # –ò–º—è —Ç–µ—Å—Ç–∞ –∏ —Ç–∞–π–º—à—Ç–∞–º–ø
    test_name = request.node.name
    timestamp = time.strftime("%Y%m%d-%H%M%S")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç–∞–¥–∏–∏ (setup/call/teardown)
    failed = (
        getattr(request.node, "rep_call", None)
        or getattr(request.node, "rep_setup", None)
        or getattr(request.node, "rep_teardown", None)
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # failed = getattr(request.node, "rep_call", None)
    suffix = "_failed" if failed and failed.failed else ""

    # –ò—Ç–æ–≥–æ–≤—ã–π –ø—É—Ç—å
    screen_path = screenshots_dir / f"{test_name}_{timestamp}{suffix}.png"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω
    page.screenshot(path=screen_path)
    print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screen_path}")
